AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: async-custom-metrics
    Description: Parses custom metrics and publishes them to CloudWatch
    Author: Lumigo
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['lambda', 'metrics', 'cloudwatch', 'monitoring', 'devops']
    HomePageUrl: https://github.com/lumigo/SAR-async-lambda-metrics
    SemanticVersion: 1.7.0
    SourceCodeUrl: https://github.com/lumigo/SAR-async-lambda-metrics

Parameters:
  EventSourceType:
    Type: String
    Default: 'Lambda'
    Description: >
      What's the event source you will intend to use?
      If logs are pushed from CloudWatch Logs to Lambda directly, then use 'Lambda'.
      If logs are pushed to a Kinesis Stream first, then use 'Kinesis'.
      Other event sources are not supported (yet).
    AllowedValues:
      - 'Lambda'
      - 'Kinesis'  
  FunctionMemorySize:
    Type: Number
    Default: 128
    MaxValue: 3008
    MinValue: 128
    Description: >
      (optional) The memory to associate with the lambda processing records from 128 to 3,008 MB in 64 MB increments.
  TimeoutSeconds:
    Type: Number
    Default: 30
    MaxValue: 900
    MinValue: 1
    Description: >
      (optional) Timeout for the Lambda function that would ship metrics to CloudWatch. Defaults to 30s.
  KinesisStreamArn:
    Type: String
    Default: ''
    Description: >
      (optional) Only relevant to the Kinesis event source type. The ARN to the Kinesis stream to 
      subscribe the function to.
  KinesisStreamBatchSize:
    Type: Number
    Default: 100
    Description: >
      (optional) Only relevant to the Kinesis event source type. The batch size to use for the 
      subscription.
  RecordLambdaUsageMetrics:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: >
      (optional) Whether to collect Lambda usage metrics (i.e. billed duration, memory size, 
      max memory used) from the logs and turn them into metrics.
      Allowed values are "true" or "false".
  RecordLambdaCostMetric:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: >
      (optional) Whether to report estimated cost for Lambda functions as metrics.
      Allowed values are "true" or "false".
  RecordLambdaColdStartMetric:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: >
      (optional) Whether to report init duration for Lambda functions as metrics.
      Allowed values are "true" or "false".

Conditions:
  IsLambda: !Equals [!Ref EventSourceType, 'Lambda']
  IsKinesis: !Equals [!Ref EventSourceType, 'Kinesis']

Globals:
  Function:
    Timeout: !Ref TimeoutSeconds
    Runtime: nodejs10.x
    MemorySize: 128
    Environment:
      Variables:
        RECORD_LAMBDA_USAGE_METRICS: !Ref RecordLambdaUsageMetrics
        RECORD_LAMBDA_COST_METRIC: !Ref RecordLambdaCostMetric
        RECORD_LAMBDA_COLD_START_METRIC: !Ref RecordLambdaColdStartMetric

Resources:
  ConvertLambda:
    Type: AWS::Serverless::Function
    Condition: IsLambda
    Properties:
      Handler: functions/index.handler
      MemorySize: !Ref FunctionMemorySize
      Policies:
        - Statement:
            Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
    
  ConvertLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsLambda
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConvertLambda}

  ConvertKinesis:
    Type: AWS::Serverless::Function
    Condition: IsKinesis
    Properties:
      Handler: functions/index.handler
      Policies:
        - Statement:
            Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !Ref KinesisStreamArn
            BatchSize: !Ref KinesisStreamBatchSize
            StartingPosition: LATEST

  ConvertKinesisLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsKinesis
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConvertKinesis}

Outputs:
  ConvertLambdaFunctionName:
    Description: Name of the Lambda function name
    Value: 
      !If [
        IsLambda, 
        !Ref ConvertLambda, 
        !Ref ConvertKinesis
      ]

  ConvertLambdaFunctionArn:
    Description: ARN of the Lambda function name
    Value: 
      !If [
        IsLambda, 
        !GetAtt ConvertLambda.Arn, 
        !GetAtt ConvertKinesis.Arn
      ]
